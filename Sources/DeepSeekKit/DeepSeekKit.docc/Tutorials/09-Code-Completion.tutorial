@Tutorial(time: 10) {
    @Intro(title: "Code Completion with Fill-in-Middle") {
        Leverage DeepSeek's Fill-in-Middle (FIM) capability to build intelligent code completion features. Learn how to provide context-aware code suggestions in your development tools.
        
        @Image(source: code-completion-intro.png, alt: "Code completion visualization")
    }
    
    @Section(title: "Understanding Fill-in-Middle") {
        @ContentAndMedia {
            Fill-in-Middle (FIM) is a powerful feature that completes code based on both preceding and following context, providing more accurate suggestions than traditional completion.
            
            @Image(source: fim-concept.png, alt: "Fill-in-Middle concept")
        }
        
        @Steps {
            @Step {
                Understand FIM completion structure.
                
                @Code(name: "FIMBasics.swift", file: fim-01-structure.swift) {
                    FIM uses prefix and suffix for context-aware completion.
                }
            }
            
            @Step {
                Create a basic completion request.
                
                @Code(name: "FIMBasics.swift", file: fim-02-request.swift) {
                    The API fills the gap between prefix and suffix.
                }
            }
            
            @Step {
                Handle completion responses.
                
                @Code(name: "FIMBasics.swift", file: fim-03-response.swift) {
                    Process the completed code suggestion.
                }
            }
            
        }
    }
    
    
    
    
    @Assessments {
        @MultipleChoice {
            What makes Fill-in-Middle more accurate than traditional completion?
            
            @Choice(isCorrect: false) {
                It only uses preceding context
                
                @Justification(reaction: "That's traditional completion") {
                    FIM uses both before AND after context for better accuracy.
                }
            }
            
            @Choice(isCorrect: true) {
                It uses both prefix and suffix context
                
                @Justification(reaction: "Exactly right!") {
                    FIM considers code both before and after the cursor for context-aware suggestions.
                }
            }
            
            @Choice(isCorrect: false) {
                It's faster than other methods
                
                @Justification(reaction: "Not about speed") {
                    FIM focuses on accuracy, not speed.
                }
            }
            
            @Choice(isCorrect: false) {
                It only works with Swift code
                
                @Justification(reaction: "Works with many languages") {
                    FIM supports multiple programming languages.
                }
            }
        }
        
        @MultipleChoice {
            When should you trigger code completion suggestions?
            
            @Choice(isCorrect: false) {
                On every keystroke
                
                @Justification(reaction: "Too aggressive") {
                    This would overwhelm both the user and the API.
                }
            }
            
            @Choice(isCorrect: true) {
                After a pause in typing with debouncing
                
                @Justification(reaction: "Perfect approach!") {
                    Debouncing provides a balance between responsiveness and efficiency.
                }
            }
            
            @Choice(isCorrect: false) {
                Only when explicitly requested
                
                @Justification(reaction: "Too conservative") {
                    Modern editors provide automatic suggestions for better flow.
                }
            }
            
            @Choice(isCorrect: false) {
                At the end of each line
                
                @Justification(reaction: "Too limiting") {
                    Completions are useful mid-line and for multi-line suggestions.
                }
            }
        }
    }
}